
## import raylib from "../bin/raylib.dll"
import ^bin.raylib as rl

MAX_BUILDINGS = 100

# Initialization
#--------------------------------------------------------------------------------------
screenWidth = 800;
screenHeight = 450;

rl.InitWindow(screenWidth, screenHeight, "raylib [core] example - 2d camera");

player = rl.Rectangle( 400, 280, 40, 40 );
buildings = []
buildColors = []

spacing = 0;

for i in 0..MAX_BUILDINGS
  r = rl.Rectangle()
  r.width = rl.GetRandomValue(50, 200);
  r.height = rl.GetRandomValue(100, 800);
  r.y = screenHeight - 130.0 - r.height;
  r.x = -6000.0 + spacing;

  spacing += r.width
  buildings.append(r)
  buildColors.append(rl.Color(rl.GetRandomValue(200, 240),
                     rl.GetRandomValue(200, 240),
                     rl.GetRandomValue(200, 250), 255));
end

camera = rl.Camera2D()
camera.target = rl.Vector2(player.x + 20.0, player.y + 20.0 )
camera.offset = rl.Vector2(screenWidth/2.0, screenHeight/2.0)
camera.rotation = 0.0
camera.zoom = 1.0

rl.SetTargetFPS(60);           # Set our game to run at 60 frames-per-second
#--------------------------------------------------------------------------------------

# Main game loop
while (!rl.WindowShouldClose())    # Detect window close button or ESC key

  # Update
  #----------------------------------------------------------------------------------

  # Player movement
  if (rl.IsKeyDown(rl.KEY_RIGHT)) then player.x += 2
  elif (rl.IsKeyDown(rl.KEY_LEFT)) then player.x -= 2 end

  # Camera target follows player
  camera.target = rl.Vector2( player.x + 20, player.y + 20 );

  # Camera rotation controls
  if (rl.IsKeyDown(rl.KEY_A)) then camera.rotation -= 1
  elif (rl.IsKeyDown(rl.KEY_S)) then camera.rotation += 1 end

  # Limit camera rotation to 80 degrees (-40 to 40)
  if (camera.rotation > 40) then camera.rotation = 40
  elif (camera.rotation < -40) then camera.rotation = -40 end

  # Camera zoom controls
  camera.zoom += (rl.GetMouseWheelMove()*0.05);

  if (camera.zoom > 3.0) then camera.zoom = 3.0
  elif (camera.zoom < 0.1) then camera.zoom = 0.1 end

  # Camera reset (zoom and rotation)
  if (rl.IsKeyPressed(rl.KEY_R))
    camera.zoom = 1.0
    camera.rotation = 0.0
  end
  #----------------------------------------------------------------------------------

  # Draw
  #----------------------------------------------------------------------------------
  rl.BeginDrawing();

  rl.ClearBackground(rl.RAYWHITE);

  rl.BeginMode2D(camera);

  rl.DrawRectangle(-6000, 320, 13000, 8000, rl.DARKGRAY);

  for i in 0..MAX_BUILDINGS
    rl.DrawRectangleRec(buildings[i], buildColors[i]);
  end

  rl.DrawRectangleRec(player, rl.RED);

  rl.DrawLine(camera.target.x, -screenHeight*10, camera.target.x, screenHeight*10, rl.GREEN)
  rl.DrawLine(-screenWidth*10, camera.target.y, screenWidth*10, camera.target.y, rl.GREEN);

  rl.EndMode2D();

  rl.DrawText("SCREEN AREA", 640, 10, 20, rl.RED);

  rl.DrawRectangle(0, 0, screenWidth, 5, rl.RED);
  rl.DrawRectangle(0, 5, 5, screenHeight - 10, rl.RED);
  rl.DrawRectangle(screenWidth - 5, 5, 5, screenHeight - 10, rl.RED);
  rl.DrawRectangle(0, screenHeight - 5, screenWidth, 5, rl.RED);

  rl.DrawRectangle( 10, 10, 250, 113, rl.Fade(rl.SKYBLUE, 0.5))
  rl.DrawRectangleLines( 10, 10, 250, 113, rl.BLUE);

  rl.DrawText("Free 2d camera controls:", 20, 20, 10, rl.BLACK);
  rl.DrawText("- Right/Left to move Offset", 40, 40, 10, rl.DARKGRAY);
  rl.DrawText("- Mouse Wheel to Zoom in-out", 40, 60, 10, rl.DARKGRAY);
  rl.DrawText("- A / S to Rotate", 40, 80, 10, rl.DARKGRAY);
  rl.DrawText("- R to reset Zoom and Rotation", 40, 100, 10, rl.DARKGRAY);

  rl.EndDrawing();
end

# De-Initialization
#--------------------------------------------------------------------------------------
rl.CloseWindow();    # Close window and OpenGL context
#--------------------------------------------------------------------------------------
